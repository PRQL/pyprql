    root: (with_def)* value_defs func_defs from

    value_defs: (value_def)*
    func_defs: (func_def)*

    value_def: "value" NAME "=" "(" from ")"
    with_def: "table" NAME "=" "(" from ")"
    alias: NAME ":"
    from: "from" [alias] NAME "|"? pipes

    pipes: ((join | select | derive | filter | sort | take | aggregate) ("|")? )* to?
    join: "join" ["side" ":" join_type] [alias] NAME ["side" ":" join_type] "[" name["=" name] "]"  ["side" ":" join_type]
    join_type: inner_join | left_join | right_join | outer_join
    inner_join: "inner"
    left_join: "left"
    right_join: "right"
    outer_join: "outer"

    to: "to" file_type /[a-zA-Z0-9_:~.\/\\\-\(\) ]+\.[a-zA-Z]+/
    file_type: csv | tsv
    csv: "csv"
    tsv: "tsv"

    aggregate: "aggregate" ["by" ":" ("[" group_by "]"| group_by)] "["? aggregate_body "]"?

    group_by: name ("," name)*
    aggregate_body: ( (NAME ":")?  pipe_body)? \
             ( "," ((NAME ":")?  pipe_body))*



    pipe_body: (STRING|SSTRING|func_call|piped_call)
    take: "take" INT ("offset" ":" INT)?

    filter: ("filter" "[" filter_line ( "," filter_line)* "]") | \
            ("filter" filter_line)
    filter_line: (ESCAPED_STRING|expression_eq)
    sort: "sort" ["order" ":" direction] sort_fields ["order" ":" direction]
    sort_fields: ("[" name ("," name)* "]" )* \
                 (ESCAPED_STRING|name*)

    direction: (ascending|descending)
    ascending: ("asc"|"ascending")
    descending: ("desc"|"descending")

    select: ("select" select_fields)+
    select_fields: ("[" select_field ("," select_field)*  "]" )* \
                   (name*)

    select_field: name ( "|" "as" name )?
    derive: ("derive" \
            ( "[" derive_line+ "]" | derive_line ))+
    derive_line: name ":" derive_body (",")?

    derive_body: (ESCAPED_STRING|expression_eq)

    expression_eq: expression
                | expression "=" expression
                | expression "<" expression -> expression_lt
                | expression ">" expression -> expression_gt
                | expression "<=" expression
                | expression ">=" expression
                | expression "!=" expression
                | expression "in" expression


    expression: expression_product
               | expression "+" expression_product -> expression_add
               | expression "-" expression_product -> expression_sub

    ?expression_product: expression_parens
                  | expression_product "*" expression_parens -> expression_mul
                  | expression_product "/" expression_parens -> expression_div

    ?expression_parens: expression_root
                      | "(" expression_parens "*" expression ")" -> expression_mul_parens
                      | "(" expression_parens "/" expression ")" -> expression_div_parens
                      | "(" expression_parens "+" expression ")" -> expression_add_parens
                      | "(" expression_parens "-" expression ")" -> expression_sub_parens

    ?expression_root:  atom

    func_def: "func" NAME [func_args] "=" "("? func_body ")"?
    func_args: ((NAME " ")* NAME)*
    func_body: expression ("," expression)*

    func_call:  NAME | \
                NAME value | \
                NAME value value | \
                NAME value value value | \
                NAME value value value value

    piped_call: (name | "(" piped_call ")" ) "|" func_call

    value: name | STRING | NUMBER | SIGNED_NUMBER | FLOAT | SIGNED_FLOAT | SSTRING
    name.1: NAME ( "." NAME)*

    SSTRING: "s" ESCAPED_STRING
    COMMENT: /#[^\n]*/

    operator: (OP_ADD | OP_SUB | OP_MUL | OP_DIV  | OP_EQ | OP_NE  | OP_LT | OP_GE | OP_LE | OP_GT)
    ?atom:  value | piped_call

    OP_ADD: "+"
    OP_SUB: "-"
    OP_MUL: "*"
    OP_DIV: "/"
    OP_MOD: "%"
    OP_COLON: ":"
    OP_EQ: "="
    OP_LT: "<"
    OP_GT: ">"
    OP_NE: "!="
    OP_LE: "<="
    OP_GE: ">="

    %import python (NAME, STRING, INTEGER)
    %import common (WS,INT,SIGNED_INT,NUMBER,SIGNED_NUMBER,FLOAT,SIGNED_FLOAT,ESCAPED_STRING,CNAME)
    %ignore WS
    %ignore COMMENT
