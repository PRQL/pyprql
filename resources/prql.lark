    root: (with_def)* value_defs func_defs from

    value_defs: (value_def)*
    func_defs: (func_def)*

    value_def: "value" NAME "=" "(" from ")"
    with_def: "table" NAME "=" "(" from ")"
    from: "from" NAME "|"? (join)? "|"? pipes

    pipes: ((select | derive | filter | sort | take| aggregate) ("|")? )*
    join: ("join"|"left_join"|"right_join")+ name "[" name ("=" name)? "]"

    aggregate: "aggregate"  \
            ("by" ":" ("[" group_by "]"| group_by) )? \
            "["? aggregate_body "]"?
    group_by: name ("," name)*
    aggregate_body: ( (NAME ":")?  pipe_body)? \
             ( "," ((NAME ":")?  pipe_body))*



    pipe_body: (STRING|FSTRING|func_call|piped_call)
    take: "take" INT

    filter: ("[" filter_line ( "," filter_line)* "]") | \
            ("filter" filter_line)
    filter_line: (ESCAPED_STRING|expression)?
    sort: "sort" (ESCAPED_STRING|name)


    select: ("select" select_fields)+
    select_fields: ("[" select_field ("," select_field)*  "]")* \
                   (name*)

    select_field: name ( "|" "as" name )?
    derive: ("derive" \
            ( "[" derive_line+ "]" | derive_line ))+
    derive_line: name ":" derive_body (",")?

    derive_body: (ESCAPED_STRING|expression)
    expression:  atom | atom operator atom | atom ESCAPED_STRING

    func_def: "func" NAME (func_args)? "=" "("? func_body ")"?
    func_args: ((NAME " ")* NAME)*
    func_body: pipe_body ("," pipe_body)*

    func_call:  NAME | \
                NAME name | \
                NAME name name | \
                NAME name name name | \
                NAME name name name name

    piped_call: name "|" func_call


    value: NAME | STRING | NUMBER | SIGNED_NUMBER | FLOAT | SIGNED_FLOAT | FSTRING
    name.9: NAME ( "." NAME)*

    FSTRING: "f" STRING
    COMMENT: /#[^\n]*/

    operator: (OP_ADD | OP_SUB | OP_MUL | OP_DIV  | OP_EQ | OP_NE  | OP_LT | OP_GE | OP_LE | OP_GT)
    ?atom: "(" expression ")" | value | piped_call

    OP_ADD: "+"
    OP_SUB: "-"
    OP_MUL: "*"
    OP_DIV: "/"
    OP_MOD: "%"
    OP_EQ: "="
    OP_NE: "!="
    OP_LT: "<"
    OP_GT: ">"

    OP_LE: "<="
    OP_GE: ">="
    OP_COLON: ":"

    %import python (NAME, STRING, INTEGER)
    %import common (WS,INT,SIGNED_INT,NUMBER,SIGNED_NUMBER,FLOAT,SIGNED_FLOAT,ESCAPED_STRING)
    %ignore WS
    %ignore COMMENT